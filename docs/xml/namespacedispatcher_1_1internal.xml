<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="namespacedispatcher_1_1internal" kind="namespace" language="C++">
    <compoundname>dispatcher::internal</compoundname>
    <innerclass refid="structdispatcher_1_1internal_1_1FunctionFromTuple" prot="public">dispatcher::internal::FunctionFromTuple</innerclass>
    <innerclass refid="structdispatcher_1_1internal_1_1FunctionFromTuple_3_01ReturnType_00_01std_1_1tuple_3_01Args_8_8_8_01_4_01_4" prot="public">dispatcher::internal::FunctionFromTuple&lt; ReturnType, std::tuple&lt; Args... &gt; &gt;</innerclass>
    <innerclass refid="structdispatcher_1_1internal_1_1ReturnTypeFromCallable" prot="public">dispatcher::internal::ReturnTypeFromCallable</innerclass>
    <innerclass refid="structdispatcher_1_1internal_1_1ReturnTypeFromCallable_3_01Callable_00_01std_1_1tuple_3_01Args_8_8_8_01_4_01_4" prot="public">dispatcher::internal::ReturnTypeFromCallable&lt; Callable, std::tuple&lt; Args... &gt; &gt;</innerclass>
    <innerclass refid="structdispatcher_1_1internal_1_1SignalFromTuple" prot="public">dispatcher::internal::SignalFromTuple</innerclass>
    <innerclass refid="structdispatcher_1_1internal_1_1SignalFromTuple_3_01std_1_1tuple_3_01Args_8_8_8_01_4_01_4" prot="public">dispatcher::internal::SignalFromTuple&lt; std::tuple&lt; Args... &gt; &gt;</innerclass>
    <innerclass refid="structdispatcher_1_1internal_1_1has__return__t" prot="public">dispatcher::internal::has_return_t</innerclass>
    <innerclass refid="structdispatcher_1_1internal_1_1has__return__t_3_01FuncSignature_00_01void__t_3_01typename_01Funf79f83a9ac24ba65ddb4c15811ab195e" prot="public">dispatcher::internal::has_return_t&lt; FuncSignature, void_t&lt; typename FuncSignature::return_t &gt; &gt;</innerclass>
    <innerclass refid="structdispatcher_1_1internal_1_1return__t__or__default" prot="public">dispatcher::internal::return_t_or_default</innerclass>
    <innerclass refid="structdispatcher_1_1internal_1_1return__t__or__default_3_01FuncSignature_00_01true_01_4" prot="public">dispatcher::internal::return_t_or_default&lt; FuncSignature, true &gt;</innerclass>
    <innerclass refid="structdispatcher_1_1internal_1_1has__args__t" prot="public">dispatcher::internal::has_args_t</innerclass>
    <innerclass refid="structdispatcher_1_1internal_1_1has__args__t_3_01FuncSignature_00_01void__t_3_01typename_01FuncSignature_1_1args__t_01_4_01_4" prot="public">dispatcher::internal::has_args_t&lt; FuncSignature, void_t&lt; typename FuncSignature::args_t &gt; &gt;</innerclass>
    <innerclass refid="structdispatcher_1_1internal_1_1args__t__or__default" prot="public">dispatcher::internal::args_t_or_default</innerclass>
    <innerclass refid="structdispatcher_1_1internal_1_1args__t__or__default_3_01FuncSignature_00_01true_01_4" prot="public">dispatcher::internal::args_t_or_default&lt; FuncSignature, true &gt;</innerclass>
    <innerclass refid="structdispatcher_1_1internal_1_1Default" prot="public">dispatcher::internal::Default</innerclass>
    <innerclass refid="structdispatcher_1_1internal_1_1FunctionDispatcher" prot="public">dispatcher::internal::FunctionDispatcher</innerclass>
    <innerclass refid="classdispatcher_1_1internal_1_1MemoryPool" prot="public">dispatcher::internal::MemoryPool</innerclass>
    <innerclass refid="classdispatcher_1_1internal_1_1CustomStackAllocator" prot="public">dispatcher::internal::CustomStackAllocator</innerclass>
    <innerclass refid="classdispatcher_1_1internal_1_1EventLoop" prot="public">dispatcher::internal::EventLoop</innerclass>
    <innerclass refid="structdispatcher_1_1internal_1_1EventDispatcher" prot="public">dispatcher::internal::EventDispatcher</innerclass>
    <innerclass refid="structdispatcher_1_1internal_1_1MockableClock" prot="public">dispatcher::internal::MockableClock</innerclass>
    <innerclass refid="structdispatcher_1_1internal_1_1Sequence" prot="public">dispatcher::internal::Sequence</innerclass>
    <innerclass refid="structdispatcher_1_1internal_1_1AnythingMatcher" prot="public">dispatcher::internal::AnythingMatcher</innerclass>
    <innerclass refid="structdispatcher_1_1internal_1_1Matcher" prot="public">dispatcher::internal::Matcher</innerclass>
    <innerclass refid="structdispatcher_1_1internal_1_1ToMatcher" prot="public">dispatcher::internal::ToMatcher</innerclass>
    <innerclass refid="structdispatcher_1_1internal_1_1ToMatcher_3_01std_1_1tuple_3_01Args_8_8_8_01_4_01_4" prot="public">dispatcher::internal::ToMatcher&lt; std::tuple&lt; Args... &gt; &gt;</innerclass>
    <innerclass refid="structdispatcher_1_1internal_1_1Expectation" prot="public">dispatcher::internal::Expectation</innerclass>
    <innerclass refid="classdispatcher_1_1internal_1_1ExpecterBase" prot="public">dispatcher::internal::ExpecterBase</innerclass>
    <innerclass refid="classdispatcher_1_1internal_1_1CallExpecter" prot="public">dispatcher::internal::CallExpecter</innerclass>
    <innerclass refid="classdispatcher_1_1internal_1_1EventExpecter" prot="public">dispatcher::internal::EventExpecter</innerclass>
    <innerclass refid="structdispatcher_1_1internal_1_1ExpecterContainer" prot="public">dispatcher::internal::ExpecterContainer</innerclass>
    <innerclass refid="classdispatcher_1_1internal_1_1CallExpectationBuilder" prot="public">dispatcher::internal::CallExpectationBuilder</innerclass>
    <innerclass refid="structdispatcher_1_1internal_1_1DefaultExpectationBuilder" prot="public">dispatcher::internal::DefaultExpectationBuilder</innerclass>
    <innerclass refid="classdispatcher_1_1internal_1_1EventExpectationBuilder" prot="public">dispatcher::internal::EventExpectationBuilder</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="dispatcher_8hpp_1aa95d89093931177dd45d2414d7e976ce" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename...</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>using dispatcher::internal::void_t = typedef void</definition>
        <argsstring></argsstring>
        <name>void_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dispatcher.hpp" line="57" column="1" bodyfile="include/dispatcher.hpp" bodystart="57" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="dispatcher__test_8hpp_1aa7bb04bcdf0e7f4f2f44ab7d264e6c74" prot="public" static="no" mutable="no">
        <type>thread_local std::shared_ptr&lt; internal::Sequence &gt;</type>
        <definition>thread_local std::shared_ptr&lt;internal::Sequence&gt; dispatcher::internal::thread_local_sequence</definition>
        <argsstring></argsstring>
        <name>thread_local_sequence</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dispatcher_test.hpp" line="34" column="30" bodyfile="include/dispatcher_test.hpp" bodystart="34" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="dispatcher_8hpp_1ae44774ac5e2ccecbfecceaa033ff95e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FuncSignature</type>
          </param>
          <param>
            <type>typename func_type</type>
          </param>
        </templateparamlist>
        <type>func_type &amp;</type>
        <definition>func_type&amp; dispatcher::internal::GetFunction</definition>
        <argsstring>()</argsstring>
        <name>GetFunction</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dispatcher.hpp" line="108" column="11" bodyfile="include/dispatcher.hpp" bodystart="108" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="dispatcher_8hpp_1a23077631747e7cae1e8159686fc1e8ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Network</type>
            <defval>Default</defval>
          </param>
        </templateparamlist>
        <type>EventLoop&lt; Network &gt; &amp;</type>
        <definition>EventLoop&lt;Network&gt;&amp; dispatcher::internal::getEventLoop</definition>
        <argsstring>()</argsstring>
        <name>getEventLoop</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dispatcher.hpp" line="306" column="11" bodyfile="include/dispatcher.hpp" bodystart="306" bodyend="310"/>
      </memberdef>
      <memberdef kind="function" id="dispatcher_8hpp_1a5c995d8c5b6d2d97440e196220d3e171" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
          <param>
            <type>typename Tuple</type>
          </param>
          <param>
            <type>std::size_t...</type>
            <declname>Is</declname>
            <defname>Is</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto dispatcher::internal::call_with_tuple</definition>
        <argsstring>(F &amp;&amp;f, Tuple &amp;&amp;t, std::index_sequence&lt; Is... &gt;)</argsstring>
        <name>call_with_tuple</name>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>Tuple &amp;&amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type>std::index_sequence&lt; Is... &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dispatcher.hpp" line="313" column="6" bodyfile="include/dispatcher.hpp" bodystart="313" bodyend="316"/>
      </memberdef>
      <memberdef kind="function" id="dispatcher_8hpp_1a2e86280f0fec8ac3aa9b7cfadd278331" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
          <param>
            <type>typename Tuple</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto dispatcher::internal::call_with_tuple</definition>
        <argsstring>(F &amp;&amp;f, Tuple &amp;&amp;t)</argsstring>
        <name>call_with_tuple</name>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>Tuple &amp;&amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dispatcher.hpp" line="319" column="6" bodyfile="include/dispatcher.hpp" bodystart="319" bodyend="323"/>
      </memberdef>
      <memberdef kind="function" id="dispatcher_8hpp_1ab7b3e6108fe7adcd53d185df934793d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FuncSignature</type>
          </param>
          <param>
            <type>typename Network</type>
          </param>
          <param>
            <type>typename signal_type</type>
          </param>
        </templateparamlist>
        <type>signal_type &amp;</type>
        <definition>signal_type&amp; dispatcher::internal::GetSignal</definition>
        <argsstring>()</argsstring>
        <name>GetSignal</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dispatcher.hpp" line="326" column="13" bodyfile="include/dispatcher.hpp" bodystart="326" bodyend="330"/>
      </memberdef>
      <memberdef kind="function" id="dispatcher_8hpp_1ac7d7d6a31d612c2b33ca6f02972e4c93" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>boost::optional&lt; boost::asio::deadline_timer::traits_type::time_type &gt; &amp;</type>
        <definition>boost::optional&lt;boost::asio::deadline_timer::traits_type::time_type&gt;&amp; dispatcher::internal::Now</definition>
        <argsstring>()</argsstring>
        <name>Now</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dispatcher.hpp" line="354" column="24" bodyfile="include/dispatcher.hpp" bodystart="354" bodyend="358"/>
      </memberdef>
      <memberdef kind="function" id="dispatcher__test_8hpp_1a1246775b19b1b676a6aad38cbcd13879" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Tuple</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
          <param>
            <type>std::size_t...</type>
            <declname>Is</declname>
            <defname>Is</defname>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool dispatcher::internal::call_tuple</definition>
        <argsstring>(const Tuple &amp;tuple, std::index_sequence&lt; Is... &gt;, const Args &amp;...args)</argsstring>
        <name>call_tuple</name>
        <param>
          <type>const Tuple &amp;</type>
          <declname>tuple</declname>
        </param>
        <param>
          <type>std::index_sequence&lt; Is... &gt;</type>
        </param>
        <param>
          <type>const Args &amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dispatcher_test.hpp" line="68" column="6" bodyfile="include/dispatcher_test.hpp" bodystart="68" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="dispatcher__test_8hpp_1ab8515e737ef3dc77055b62c106594b86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FuncSignature</type>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt; std::is_void&lt; typename FunctionDispatcher&lt; FuncSignature &gt;::return_t &gt;::value &gt;::type</type>
        <definition>std::enable_if&lt;std::is_void&lt;typename FunctionDispatcher&lt;FuncSignature&gt;::return_t&gt;::value&gt;::type dispatcher::internal::return_value</definition>
        <argsstring>()</argsstring>
        <name>return_value</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dispatcher_test.hpp" line="358" column="34" bodyfile="include/dispatcher_test.hpp" bodystart="358" bodyend="361"/>
      </memberdef>
      <memberdef kind="function" id="dispatcher__test_8hpp_1a23057fc3717c00cbf52663e470e4a771" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FuncSignature</type>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt;!std::is_void&lt; typename FunctionDispatcher&lt; FuncSignature &gt;::return_t &gt;::value &amp;&amp;std::is_default_constructible&lt; typename FunctionDispatcher&lt; FuncSignature &gt;::return_t &gt;::value, typename FunctionDispatcher&lt; FuncSignature &gt;::return_t &gt;::type</type>
        <definition>std::enable_if&lt;!std::is_void&lt;typename FunctionDispatcher&lt;FuncSignature&gt;::return_t&gt;::value &amp;&amp; std::is_default_constructible&lt;typename FunctionDispatcher&lt;FuncSignature&gt;::return_t&gt;::value, typename FunctionDispatcher&lt;FuncSignature&gt;::return_t&gt;::type dispatcher::internal::return_value</definition>
        <argsstring>()</argsstring>
        <name>return_value</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dispatcher_test.hpp" line="368" column="1" bodyfile="include/dispatcher_test.hpp" bodystart="368" bodyend="371"/>
      </memberdef>
      <memberdef kind="function" id="dispatcher__test_8hpp_1a10f340c76853038ca72ab9d924437502" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FuncSignature</type>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt;!std::is_void&lt; typename FunctionDispatcher&lt; FuncSignature &gt;::return_t &gt;::value &amp;&amp;!std::is_default_constructible&lt; typename FunctionDispatcher&lt; FuncSignature &gt;::return_t &gt;::value, typename FunctionDispatcher&lt; FuncSignature &gt;::return_t &gt;::type</type>
        <definition>std::enable_if&lt;!std::is_void&lt;typename FunctionDispatcher&lt;FuncSignature&gt;::return_t&gt;::value &amp;&amp; !std::is_default_constructible&lt;typename FunctionDispatcher&lt;FuncSignature&gt;::return_t&gt;::value, typename FunctionDispatcher&lt;FuncSignature&gt;::return_t&gt;::type dispatcher::internal::return_value</definition>
        <argsstring>()</argsstring>
        <name>return_value</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dispatcher_test.hpp" line="378" column="1" bodyfile="include/dispatcher_test.hpp" bodystart="378" bodyend="381"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="include/dispatcher.hpp" line="30" column="1"/>
  </compounddef>
</doxygen>
